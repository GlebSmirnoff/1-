from django.core.management.base import BaseCommand
import openpyxl
from listing.models import Listing
from django.contrib.auth import get_user_model

User = get_user_model()

REQUIRED_COLUMNS = [
    "–ú–∞—Ä–∫–∞", "–ú–æ–¥–µ–ª—å", "–†—ñ–∫", "–ö—É–∑–æ–≤", "–î–≤–∏–≥—É–Ω", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–ª–∞—Å–Ω–∏–∫—ñ–≤"
]

class Command(BaseCommand):
    help = "–Ü–º–ø–æ—Ä—Ç –æ–≥–æ–ª–æ—à–µ–Ω—å –∑ Excel —Ñ–∞–π–ª—É"

    def add_arguments(self, parser):
        parser.add_argument("filepath", type=str, help="–®–ª—è—Ö –¥–æ Excel-—Ñ–∞–π–ª—É")

    def handle(self, *args, **options):
        filepath = options["filepath"]
        wb = openpyxl.load_workbook(filepath)
        sheet = wb.active

        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (1-–π —Ä—è–¥–æ–∫)
        raw_headers = next(sheet.iter_rows(min_row=1, max_row=1, values_only=True))
        headers = [str(cell).strip().title() if cell else "" for cell in raw_headers]
        self.stdout.write(f"üîç –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑ —Ñ–∞–π–ª—É (–Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–æ): {headers}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—Å—ñ—Ö –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
        missing = [col for col in REQUIRED_COLUMNS if col not in headers]
        if missing:
            self.stdout.write(self.style.ERROR(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing)}"))
            return

        rows = list(sheet.iter_rows(min_row=2, values_only=True))
        imported, skipped = 0, 0

        for row in rows:
            data = dict(zip(headers, [str(cell).strip() if cell else "" for cell in row]))

            if not all(data.get(col) for col in REQUIRED_COLUMNS):
                self.stdout.write(self.style.WARNING(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ä—è–¥–æ–∫: –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö"))
                skipped += 1
                continue

            try:
                user = User.objects.filter(is_superuser=True).first()
                if not user:
                    self.stdout.write(self.style.ERROR("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å—É–ø–µ—Ä–∞–¥–º—ñ–Ω–∞ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É"))
                    break

                Listing.objects.create(
                    user=user,
                    vin=None,
                    color=None,
                    owners_count=int(data["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –í–ª–∞—Å–Ω–∏–∫—ñ–≤"]),
                    price=0,
                    currency="USD",
                    year=int(data["–†—ñ–∫"]),
                    mileage=0,
                    brand=None,
                    model=None,
                    body_type=None,
                    engine=None,
                )
                imported += 1
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}"))
                skipped += 1

        self.stdout.write(self.style.SUCCESS(f"‚úÖ –Ü–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {imported} –¥–æ–¥–∞–Ω–æ, {skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ"))
